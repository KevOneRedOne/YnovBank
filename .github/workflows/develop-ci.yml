name: Build, Test and Deploy - Develop Branch

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies for API
        run: |
          cd api
          go mod tidy

      - name: Install dependencies for App
        run: |
          cd app
          npm install
          
      - name: Fix package-lock.json
        run: |
          cd app
          npm i --package-lock-only --no-audit

      - name: Build App
        run: |
          cd app
          npm run build

      # Ajout d'étapes de test qui n'impactent pas la version
      - name: Run tests for App
        run: |
          cd app
          # Assurez-vous que vous avez un script de test dans package.json
          npm test || echo "No tests to run"

  semantic-release-dry-run:
    name: Semantic Release Dry Run
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      # Installation des plugins semantic-release pour l'application Nuxt
      - name: Install semantic-release and plugins for App
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator
      
      # Pour l'API Go - utilisation de go-semantic-release/action
      - name: Semantic Release Dry Run for API
        uses: go-semantic-release/action@v1
        with:
          dry: true
          prerelease: true
        env:
          GITHUB_WORKING_DIR: ./api
      
      # Pour l'App - en mode dry-run pour ne pas créer de version réelle
      - name: Semantic Release Dry Run for App
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}xs
        run: |
          cd app
          npx semantic-release --dry-run

  create-preview:
    name: Create Preview Summary
    needs: semantic-release-dry-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Get the SHA of the latest commit
        id: sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get App current version
        id: app_version
        run: |
          cd app
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Set current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Get recent commits
        id: get_commits
        run: |
          COMMITS=$(git log -5 --pretty=format:"* %s (%h)" --no-merges)
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Preview Summary
        run: |
          # Créer un résumé de prévisualisation
          PREVIEW_SUMMARY="## YnovBank Develop Preview

          Current App Version: v${{ steps.app_version.outputs.version }}
          Preview Date: ${{ steps.date.outputs.date }}
          Branch: develop
          Commit: ${{ steps.sha.outputs.sha }}

          ### Recent Changes
          ${{ steps.get_commits.outputs.commits }}

          Latest commit message:
          ${{ github.event.head_commit.message }}"

          echo "$PREVIEW_SUMMARY" > preview_summary.md

          # Afficher le résumé dans les logs
          cat preview_summary.md

          # Sauvegarder le résumé comme un artefact GitHub Actions
          mkdir -p ./artifacts
          cp preview_summary.md ./artifacts/

      - name: Upload Preview Summary
        uses: actions/upload-artifact@v2
        with:
          name: preview-summary
          path: artifacts/preview_summary.md

  deploy-to-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Simule un déploiement vers un environnement de staging
      - name: Deploy to Staging Environment
        run: |
          echo "Déploiement vers l'environnement de staging..."
          echo "Cette étape serait configurée pour déployer vers Render ou Fly.io"
          # Ici vous ajouteriez les commandes réelles pour déployer vers votre environnement staging

      - name: Post Deployment Status
        run: |
          echo "Déploiement sur l'environnement de staging terminé avec succès"
          echo "URL: https://staging-ynovbank.example.com"
