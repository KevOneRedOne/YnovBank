name: Build, Test and Deploy - Develop Branch

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            app/**
            api/**
            api-express/**

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            ./app/package-lock.json
            ./api-express/package-lock.json

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Install dependencies for API GOLANG
        run: |
          cd api
          go mod tidy

      - name: Test API GOLANG
        run: |
          cd api
          go test ./...

      - name: Install dependencies for API EXPRESS
        run: |
          cd api-express
          npm install || echo "No package.json found, skipping install"

      - name: Test API EXPRESS
        run: |
          cd api-express
          npm test || echo "No tests to run"

      - name: Build API EXPRESS
        run: |
          cd api-express
          npm run build || echo "No build script found, skipping build"

      - name: Install dependencies for App
        run: |
          cd app
          npm install

      - name: Fix package-lock.json
        run: |
          cd app
          npm i --package-lock-only --no-audit

      - name: Test App
        run: |
          cd app
          npm test || echo "No tests to run"

      - name: Build App
        run: |
          cd app
          npm run build

  semantic-release:
    name: Semantic Release
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN_GITHUB }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://npm.pkg.github.com"
          scope: "@kevoneredone"

      - name: Semantic Release for API
        uses: go-semantic-release/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          github-token: ${{ secrets.TOKEN_GITHUB }}
          allow-initial-development-versions: true
          changelog-file: api/CHANGELOG.md
          update-file: api/version.txt
          prerelease: true

      - name: Install version management tools for node packages
        run: |
          npm install -g semver

      - name: Semantic Release for API Express
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: |
          if [ -f api-express/package.json ]; then
            cd api-express
            
            # Get current version
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "Current API Express version: $CURRENT_VERSION"
            
            # Skip semantic release on develop and just do a manual version bump
            # For develop branch, use prerelease tag
            if [[ $CURRENT_VERSION == *"-dev"* ]]; then
              npm version prerelease --preid=dev --no-git-tag-version || echo "Version bump failed but continuing workflow"
            else
              npm version prepatch --preid=dev --no-git-tag-version || echo "Version bump failed but continuing workflow"
            fi
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "API Express version: $CURRENT_VERSION → $NEW_VERSION"
          else
            echo "API Express package.json not found, skipping semantic release"
          fi

      - name: Semantic Release for App
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: |
          cd app
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current App version: $CURRENT_VERSION"
          
          # Skip semantic release on develop and just do a manual version bump
          # For develop branch, use prerelease tag
          if [[ $CURRENT_VERSION == *"-dev"* ]]; then
            npm version prerelease --preid=dev --no-git-tag-version || echo "Version bump failed but continuing workflow"
          else
            npm version prepatch --preid=dev --no-git-tag-version || echo "Version bump failed but continuing workflow"
          fi
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "App version: $CURRENT_VERSION → $NEW_VERSION"

  docker-images:
    name: Build and Push Docker Images
    needs: semantic-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Fix DNS resolution issues
      - name: Setup DNS
        run: |
          echo "Checking DNS resolution..."
          cat /etc/resolv.conf
          echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
          echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf
          echo "Updated DNS servers:"
          cat /etc/resolv.conf

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          
      - name: Verify Docker Hub authentication
        run: |
          echo "Logged in as ${{ secrets.DOCKER_USERNAME }}"
          # Check if repository exists or create it
          echo "Checking access to Docker Hub repositories..."
          echo "Note: If this is the first time pushing, you may need to manually create the repositories in Docker Hub"

      - name: Get App version
        id: app_version
        run: |
          cd app
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Get API version from version.txt
        id: api_version
        run: |
          if [ -f api/version.txt ]; then
            echo "version=$(cat api/version.txt)" >> $GITHUB_OUTPUT
          else
            echo "version=0.0.1" >> $GITHUB_OUTPUT
          fi

      # Build and push React App Docker image
      - name: Build and push App image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ynovbank:app-latest
            ${{ secrets.DOCKER_USERNAME }}/ynovbank:app-${{ steps.app_version.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/ynovbank:app-develop
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ynovbank:app-latest
          cache-to: type=inline

      # Build and push Golang API Docker image
      - name: Build and push Golang API image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ynovbank:api-latest
            ${{ secrets.DOCKER_USERNAME }}/ynovbank:api-${{ steps.api_version.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/ynovbank:api-develop
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ynovbank:api-latest
          cache-to: type=inline

      # Build and push Express API Docker image
      - name: Build and push Express API image
        uses: docker/build-push-action@v5
        with:
          context: ./api-express
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ynovbank:express-latest
            ${{ secrets.DOCKER_USERNAME }}/ynovbank:express-${{ steps.app_version.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/ynovbank:express-develop
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ynovbank:express-latest
          cache-to: type=inline

  create-release:
    name: Create GitHub Release
    needs: docker-images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.TOKEN_GITHUB }}

      - name: Get the SHA of the latest commit
        id: sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get API version
        id: api_version
        run: |
          if [ -f api/version.txt ]; then
            API_VERSION=$(cat api/version.txt)
          else
            API_VERSION=$(git tag --list "v*" --sort=-v:refname | grep -v '.*-.*' | head -n 1 | sed 's/^v//')
            if [ -z "$API_VERSION" ]; then
              API_VERSION="0.0.0"
            fi
          fi
          echo "version=$API_VERSION" >> $GITHUB_OUTPUT

      - name: Get App version
        id: app_version
        run: |
          cd app
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Set current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Get recent commits
        id: get_commits
        run: |
          COMMITS=$(git log -5 --pretty=format:"* %s (%h)" --no-merges)
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        run: |
          RELEASE_TAG="v${{ steps.app_version.outputs.version }}-dev"
          if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "Release $RELEASE_TAG already exists, skipping..."
            exit 0
          fi

          RELEASE_BODY="## YnovBank Development Release

          🚀 **API Version:** v${{ steps.api_version.outputs.version }}
          📱 **App Version:** v${{ steps.app_version.outputs.version }}-dev
          📅 **Release Date:** ${{ steps.date.outputs.date }}

          ### 📝 Recent Changes
          ${{ steps.get_commits.outputs.commits }}

          ### 🔗 Links
          - [API Documentation](./api/)
          - [App Documentation](./app/)

          ---
          **Full Changelog:** [Compare changes](https://github.com/${{ github.repository }}/compare/v${{ steps.api_version.outputs.version }}...develop)"

          echo "$RELEASE_BODY" > release_notes.md

          gh release create "$RELEASE_TAG" \
            --title "🧪 YnovBank Development v${{ steps.app_version.outputs.version }}" \
            --notes-file release_notes.md \
            --prerelease \
            --generate-notes
          echo "Development Release $RELEASE_TAG created successfully."

  bump-version:
    name: Bump Version for Next Development Cycle
    needs: create-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.TOKEN_GITHUB }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Get current App version
        id: current_app_version
        run: |
          cd app
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Get current API version
        id: current_api_version
        run: |
          if [ -f api/version.txt ]; then
            echo "version=$(cat api/version.txt)" >> $GITHUB_OUTPUT
          else
            VERSION=$(git tag --list "v*" --sort=-v:refname | grep -v '.*-.*' | head -n 1 | sed 's/^v//')
            if [ -z "$VERSION" ]; then
              VERSION="0.0.0"
            fi
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      # Bump React App version (for develop branch, use prerelease)
      - name: Bump App version
        run: |
          cd app
          # Parse current version and check if it already has a prerelease tag
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [[ $CURRENT_VERSION == *"-dev"* ]]; then
            # Already has prerelease tag, just do a prerelease bump
            npm version prerelease --preid=dev --no-git-tag-version
          else
            # No prerelease tag yet, add dev tag and bump
            npm version prepatch --preid=dev --no-git-tag-version
          fi
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Bumped App version to $NEW_VERSION"

      # Bump API Express version (for develop branch, use prerelease)
      - name: Bump API Express version
        run: |
          if [ -f api-express/package.json ]; then
            cd api-express
            # Parse current version and check if it already has a prerelease tag
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            if [[ $CURRENT_VERSION == *"-dev"* ]]; then
              # Already has prerelease tag, just do a prerelease bump
              npm version prerelease --preid=dev --no-git-tag-version
            else
              # No prerelease tag yet, add dev tag and bump
              npm version prepatch --preid=dev --no-git-tag-version
            fi
            NEW_VERSION=$(node -p "require('./package.json').version")
            echo "Bumped API Express version to $NEW_VERSION"
          else
            echo "API Express package.json not found, skipping version bump"
          fi

      # Create or update a development version.txt for Go API
      - name: Bump Go API version
        run: |
          cd api
          CURRENT_VERSION="${{ steps.current_api_version.outputs.version }}"

          # Check if it's already a development version
          if [[ $CURRENT_VERSION == *"-dev"* ]]; then
            # Extract the base version and increment
            BASE_VERSION=$(echo $CURRENT_VERSION | cut -d'-' -f1)
            DEV_NUM=$(echo $CURRENT_VERSION | cut -d'-' -f2 | cut -d'.' -f2)
            if [ -z "$DEV_NUM" ]; then
              DEV_NUM=0
            fi
            DEV_NUM=$((DEV_NUM + 1))
            NEW_VERSION="${BASE_VERSION}-dev.${DEV_NUM}"
          else
            # Split the version into components
            IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
            
            # Add dev tag
            NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}-dev.1"
          fi

          echo "$NEW_VERSION" > version.txt
          echo "Bumped API version to $NEW_VERSION"

      - name: Commit and push version bumps
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add app/package.json
          git add api/version.txt

          if [ -f api-express/package.json ]; then
            git add api-express/package.json
          fi

          git commit -m "chore: bump development versions [skip ci]" || echo "No changes to commit"
          git push || echo "Nothing to push"
