name: Build, Test and Deploy - Main Branch

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies for API
        run: |
          cd api
          go mod tidy

      - name: Install dependencies for App
        run: |
          cd app
          npm install
          
      - name: Fix package-lock.json
        run: |
          cd app
          npm i --package-lock-only --no-audit

      - name: Build App
        run: |
          cd app
          npm run build

  semantic-release:
    name: Semantic Release
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Installation des plugins semantic-release pour l'application Nuxt
      - name: Install semantic-release and plugins for App
        run: |
          npm install -g semantic-release @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator

      # Pour l'API Go - utilisation de go-semantic-release/action
      - name: Semantic Release for API
        uses: go-semantic-release/action@v1
        with:
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_WORKING_DIR: ./api

      # Pour l'App version update
      - name: Semantic Release for App
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd app
          npx semantic-release

  create-release:
    name: Create GitHub Release
    needs: semantic-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Get the SHA of the latest commit
        id: sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get API version
        id: api_version
        run: |
          # Récupérer la dernière version de l'API à partir des tags générés par go-semantic-release
          API_VERSION=$(git tag --list "v*" --sort=-v:refname | grep -v '.*-.*' | head -n 1 | sed 's/^v//')
          if [ -z "$API_VERSION" ]; then
            API_VERSION="0.0.0"
          fi
          echo "version=$API_VERSION" >> $GITHUB_OUTPUT

      - name: Get App version
        id: app_version
        run: |
          cd app
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Set current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Get recent commits
        id: get_commits
        run: |
          COMMITS=$(git log -5 --pretty=format:"* %s (%h)" --no-merges)
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the release body
          RELEASE_BODY="## YnovBank Release

          API Version: v${{ steps.api_version.outputs.version }}
          App Version: v${{ steps.app_version.outputs.version }}
          Release Date: ${{ steps.date.outputs.date }}

          ### What's New
          ${{ steps.get_commits.outputs.commits }}

          Commit messages:
          ${{ github.event.head_commit.message }}"

          # Create the release with GitHub CLI
          echo "$RELEASE_BODY" > release_notes.md

          # Create the release using the App version (you can adjust this strategy)
          gh release create "v${{ steps.app_version.outputs.version }}" \
            --title "Release v${{ steps.app_version.outputs.version }} - ${{ steps.date.outputs.date }}" \
            --notes-file release_notes.md
